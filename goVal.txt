
    def setGOVal(self,ac):
        global lastPath
        global count

        liNac, cmNumSt, cavNumA, cavNumB = self.getUserVal()    # This gets the User inputs from the spinBox and checkboxes
#                                                               # cmNumSt is a string of the cm number. cavNumA & B are strings of cavities chec$

        if (len(cavNumA)+len(cavNumB))==2:                      # If sum of len of cavity num strings is 2, one of the strings has a cavity numb$

            timMeas = self.ui.spinBox.value()  # Get time for measurement from spinBox
            count=timMeas+30
            self.ui.AcqProg.setText("Data Acquisition started. ~"+str(count)+" sec left.")      # decrementing the counter

            resScrptSrce = "$PACKAGE_TOP/lcls2_llrf/srf/software/res_ctl/res_data_acq.py"
            morPath = "$PHYSICS_DATA/rf_lcls2/microphonics/"
            s1 = datetime.now().strftime("%Y%m%d"+"_"+"%H%M%S")
            botPath = "ACCL_"+liNac+"_"+cmNumSt

            if cavNumA != '':
                botPath = botPath+cavNumA[0]+"0/"+botPath+cavNumA[0]+"0_"+s1
                caCmd = "ca://ACCL:"+liNac+":"+str(cmNumSt)+"00:RESA:"

            if cavNumB != '':
                botPath = botPath+cavNumB[0]+"0/"+botPath+cavNumB[0]+"0_"+s1
                caCmd = "ca://ACCL:"+liNac+":"+str(cmNumSt)+"00:RESB:"

            lastPath =  path.join(morPath, botPath)
            makedirs(lastPath, exist_ok=True)

            numbWaveF= str(int(timMeas//8)+(timMeas % 8 > 0))

            cmdList= ["python",resScrptSrce,"-D",lastPath,"-a",caCmd,"-wsp","2","-acav",cavNumA,"-ch","DF", "-c", numbWaveF]
#            print(cmdList)

#                FFt_math.dummyFileCreator(lastPath)

#  The following two lines are to execute the shel command to take microphonics data
            try:
                p = subprocess.Popen(['ls','../', '-l'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
# Grab stdout line by line as it becomes available.  This will loop until  p terminates.
                while p.poll() is None:
                        out = p.stdout.readline() # This blocks until it receives a newline.
                        print(str(out))
                        self.ui.AcqProg.setText(str(out))
# When the subprocess terminates there might be unconsumed output
# that still needs to be processed.
                self.ui.AcqProg.setText(str(p.stdout.read()))
                self.ui.AcqProg.setText(str(p.stderr.read()))

#                out = subprocess.check_output(cmdList, shell=False)
#                self.ui.AcqProg.setText(out)

            except subprocess.CalledProcessError as e:
                self.ui.AcqProg.setText("Call to microphonics script failed\n"+str(e.output))

#            self.getDataBack(ac)

#            self.timer.start(1000)

        elif (len(cavNumA) + len(cavNumB)) > 2:                 #If sum of len is greater than 2, then more than one cavity is selected
            self.ui.AcqProg.setText("Only one cavity can be selected. \nTry again")

        else:
            self.ui.AcqProg.setText("No Cavity selected. try again")
        return ()
